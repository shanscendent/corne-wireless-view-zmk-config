/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Mute {
            bindings = <&kp C_MUTE>;
            key-positions = <25 26>;
            layers = <1>;
        };

        Play,Pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <27 28>;
            layers = <1>;
        };

        Brightness_Dec {
            bindings = <&kp C_BRIGHTNESS_DEC>;
            key-positions = <29 28>;
            layers = <1>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <30 31>;
            layers = <2>;
        };

        raise_equals {
            bindings = <&kp EQUAL>;
            key-positions = <22 23>;
            layers = <2>;
        };

        cd {
            bindings = <&cd>;
            key-positions = <27 28>;
            layers = <0>;
        };
    };

    macros {
        cd: cd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp D>;
            label = "CD";
        };
    };

    behaviors {
        td_lh_space: td_lh_space {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LH_SPACE";
            #binding-cells = <0>;
            bindings = <&lt 1 RET>, <&kt LALT>;

            tapping-term-ms = <200>;
        };

        td_lh_ctrl: td_lh_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LH_CTRL";
            #binding-cells = <0>;
            bindings = <&mt LCTRL BACKSPACE>, <&kp LC(LEFT_SHIFT)>;

            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp ESCAPE        &kp Q  &kp W  &kp E     &kp R        &kp T           &kp Y        &kp U      &kp I               &kp O    &kp P     &kp BSPC
&mt LEFT_ALT TAB  &kp A  &kp S  &kp D     &kp F        &kp G           &kp H        &kp J      &kp K               &kp L    &kp SEMI  &mt RCTRL SQT
&kp LSHFT         &kp Z  &kp X  &kp C     &kp V        &kp B           &kp N        &kp M      &kp COMMA           &kp DOT  &kp FSLH  &mt RIGHT_SHIFT ENTER
                                &kp LGUI  &td_lh_ctrl  &td_lh_space    &lt 2 SPACE  &lt 3 TAB  &mt RALT BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&trans  &kp N1             &kp N2             &kp N3           &kp N4       &kp N5                  &kp N6        &kp N7  &kp N8  &kp N9  &kp N0      &trans
&trans  &kp LC(N1)         &kp LC(GRAVE)      &kp LC(LS(TAB))  &kp LC(TAB)  &kp TAB                 &kp ASTERISK  &kp N4  &kp N5  &kp N6  &kp PLUS    &kp MINUS
&trans  &kp C_VOLUME_DOWN  &kp C_VOLUME_DOWN  &kp C_PREVIOUS   &kp C_NEXT   &kp C_BRIGHTNESS_INC    &kp SLASH     &kp N1  &kp N2  &kp N3  &kp PERIOD  &trans
                                              &trans           &trans       &trans                  &trans        &trans  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&kp GRAVE  &kp SINGLE_QUOTE  &kp LESS_THAN  &kp GREATER_THAN  &kp DOUBLE_QUOTES  &kp DOT           &kp AMPERSAND  &kp SEMICOLON  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT   &trans
&trans     &kp EXCLAMATION   &kp MINUS      &kp PLUS          &kp EQUAL          &kp POUND         &kp PIPE       &kp COLON      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION  &trans
&trans     &kp CARET         &kp FSLH       &kp ASTERISK      &kp BSLH           &kp UNDERSCORE    &kp TILDE      &kp DOLLAR     &kp LBRC              &kp RBRC               &kp AT_SIGN   &trans
                                            &trans            &trans             &trans            &trans         &trans         &trans
            >;
        };

        adjust_layer {
            bindings = <
&kp CAPSLOCK  &kp F1   &kp F2   &kp F3      &kp F4      &kp F5          &kp F6     &kp F7      &kp F8    &kp F9   &kp F10             &kp DEL
&bt BT_CLR    &kp F11  &kp F12  &bt BT_PRV  &bt BT_NXT  &trans          &kp PG_UP  &kp LEFT    &kp DOWN  &kp UP   &kp RIGHT           &trans
&trans        &trans   &trans   &trans      &trans      &trans          &kp PG_DN  &kp INSERT  &kp HOME  &kp END  &kp K_CONTEXT_MENU  &trans
                                &trans      &trans      &kp LEFT_ALT    &trans     &trans      &trans
            >;

            label = "Adjust";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };
};
